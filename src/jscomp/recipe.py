import build.depswriter
import build.source

class Deps(object):

    def __init__(self, buildout, name, options):
        self.buildout = buildout
        self.name = name
        self.options = options

        self.output = options["output"]

    def install(self):
        path_to_source = {}

        # Roots without prefixes
        for root in self.options.get("roots", "").split("\n"):
            if not root:
                continue

            path_to_source.update(
                build.depswriter._GetRelativePathToSourceDict(root)
                )

        # Roots with prefixes
        for root_with_prefix in \
                self.options.get("root_with_prefix", "").split("\n"):
            if not root_with_prefix:
                continue

            root, prefix = build.depswriter._GetPair(root_with_prefix)
            path_to_source.update(
                build.depswriter._GetRelativePathToSourceDict(
                    root, prefix = prefix)
                )

        # Source paths with alternate deps paths
        for path_with_depspath in \
                self.options.get("paths_with_depspath", "").split("\n"):
            if not path_with_depspath:
                continue

            srcpath, depspath = build.depswriter._GetPair(path_with_depspath)
            path_to_source[depspath] = build.source.Source(
                build.source.GetFileContents(srcpath)
                )

        out = open(self.output, "w")
        out.write(
            "// This file was autogenerated by buildout[%s].\n" % self.name)
        out.write("// Please do not edit.\n")

        out.write(build.depswriter.MakeDepsFile(path_to_source))

        return ()

    uninstall = install
